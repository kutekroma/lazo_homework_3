# Определите суперкласс Сотрудник, включающий:
#
# конструктор, инициализирующий имя работника, его должность (по умолчанию None) и оклад (по умолчанию 0);
# метод экземпляра для повышения оклада на какую-то часть (например, на 0.3, т.е. на 30%) с округлением результата до копеек;
# магический метод str для перегрузки строкового представления объекта, который должен выводить данные о работнике в формате 'Атрибут:
# объект.атрибут' по одной записи на каждой строке.
# Также определите подкласс Менеджер, наследующий суперкласс Сотрудник и
# переопреоделяющий метод повышения оклада таким образом, чтобы он еще больше повышал оклад за счет дополнительного бонуса
# в виде к акой-то части оклада. Далее:
# создайте экземпляр иван_менеджер созданного подкласса с начальным окладом в 1700 рублей;
# повысьте сотруднику оклад за счет стандартной надбавки в 0.335 и бонуса за должность в 0.25;
# выведите строковое представление объекта экземпляра с информацией о сотруднике на экран.

#Выполнил Лазо Александр

class Employee:
    def __init__(self, name, job_title=None, salary=0):
        self.name = name
        self.job_title = job_title
        self.salary = salary
    def salary_increase(self, part=0.3):
        self.salary += self.salary * part
        self.salary = round(self.salary, 2)
    def __str__(self):
        return f'Имя: {self.name}\nДолжность: {self.job_title}\nОклад: {self.salary} руб.'

class Manager(Employee):
    #метод, повышающий оклад за счет бонуса
    def salary_increase(self, part=0, bonus=0):
        super().salary_increase(part+bonus)


if __name__ == '__main__':
    # Создание экземпляра иван_менеджер с начальным окладом в 1700 рублей
    иван_менеджер = Manager("Иван", "Менеджер", 1700)
    # Повышение оклада на надбавку в 0.335 и бонуса за должность в 0.25
    иван_менеджер.salary_increase(0.335, 0.25)
    # Вывод информации о сотруднике
    print(иван_менеджер)